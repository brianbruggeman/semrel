name: Run cargo command
on:
  workflow_call:
    secrets:
      app_id:
        description: "github app id"
      app_secret:
        description: "github app pem"
    inputs:
      command:
        type: string
        description: "The command to run"
        default: ""
      working-dir:
        type: string
        description: "Which work-dir to run this command in"
        default: "."
      os:
        type: string
        description: "The operating system"
        # This is interpreted by fromJson which expects a json array as a string
        default: '["ubuntu-latest"]'

permissions:
  contents: write
  packages: read
  actions: read
  pull-requests: read

jobs:
  # JOB to run change detection
  command:
    name: ${{ inputs.command == '' && 'Initializing cache' || inputs.command }} [${{ matrix.os }}]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ${{ fromJson(inputs.os) }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
            components: rustfmt, clippy

      - name: Set up Nightly Rust Toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
            components: rustfmt, clippy

      - name: Cache sccache installation
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/sccache
          key: sccache-${{ runner.os }}

      - name: Ensure sccache installed
        run: |
          if ! command -v sccache &>/dev/null; then
            cargo install sccache
          fi

      - name: Configure sccache
        run: |
          echo "SCCACHE_DIR=${{ github.workspace }}/sccache" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

      - name: Cache Cargo dependencies
        if: ${{ inputs.command != ''}}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            target
            ${{ env.SCCACHE_DIR }}
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Generate GitHub App Installation Token
        id: generate_token
        if: ${{ inputs.command != ''}}
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.app_id }}
          private_key: ${{ secrets.app_secret }}

      - name: Create base64 auth
        id: base64_auth
        if: ${{ inputs.command != ''}}
        run: |
          GITHUB_AUTH=$(echo -n "x-access-token:${{ steps.generate_token.outputs.token }}" | base64)
          echo "::set-output name=auth::$GITHUB_AUTH" # This sets the output for the auth

      - name: Set up Git Authentication
        if: ${{ inputs.command != ''}}
        run: |
          git config --global http.extraheader "Authorization: Basic ${{ steps.base64_auth.outputs.auth }}"

      - name: Running `${{ inputs.command }}`
        if: ${{ inputs.command != ''}}
        working-directory: ${{ inputs.working-dir }}
        run: |
          ${{ inputs.command }}
