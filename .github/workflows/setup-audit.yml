name: Setup Audit

on:
  workflow_call:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      # We cache the cargo-audit binary to avoid long compilation times, especially on developer machines
      # This step is critical for fast iterations, as compilation can take up to 10 minutes on some setups
      - name: Load Cached Cargo Audit binary
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/cargo-audit
          key: ${{ runner.os }}-cargo-audit
        # The key is universal. We shouldn't need to rebuild this binary often

      # This step ensures cargo-audit is available, installing it if not found in cache
      # It's a fallback measure, as GitHub's caching can sometimes be inconsistent
      - name: Ensure cargo-audit is installed
        run: |
          if ! command -v cargo-audit &>/dev/null; then
            cargo install cargo-audit
          fi
        # This approach improves caching behavior, resulting in a ~6MB cache
        # instead of GBs required for caching all dependencies

# Note: This setup can be used with 'act' for local testing:
# act -P ubuntu-latest=catthehacker/ubuntu:act-latest --container-architecture linux/amd64 -j audit
# On macOS, specify the container architecture as above to match GitHub's cloud environment