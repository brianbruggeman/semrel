name: CI
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  detect-new-version:
    uses: ./.github/workflows/detect-new-version.yml
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}

  display-version:
    needs: [detect-new-version]
    runs-on: ubuntu-latest
    steps:
      - name: Display version
        run: |
          echo "Current version: ${{ needs.detect-new-version.outputs.current-version }}"
          echo "Next version: ${{ needs.detect-new-version.outputs.next-version }}"
          echo "Release notes: ${{ needs.detect-new-version.outputs.release-notes }}"
          echo "Log: ${{ needs.detect-new-version.outputs.log }}"

  cargo_fmt:
    needs: [detect-new-version]
    if: ${{ needs.detect-new-version.outputs.next-version != needs.detect-new-version.outputs.current-version }}
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Install cargo fmt
        run: rustup component add rustfmt
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          toolchain: nightly
          command: fmt
          args: -- --check

  cargo_clippy:
    needs: [detect-new-version]
    if: ${{ needs.detect-new-version.outputs.next-version != needs.detect-new-version.outputs.current-version }}
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Install clippy
        run: rustup +nightly component add clippy
      - name: Cache cargo clippy
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-clippy-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          toolchain: nightly
          command: clippy

  cargo_build:
    needs: [detect-new-version]
    if: ${{ needs.detect-new-version.outputs.next-version != needs.detect-new-version.outputs.current-version }}
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build

  cargo_test:
    needs: [detect-new-version]
    if: ${{ needs.detect-new-version.outputs.next-version != needs.detect-new-version.outputs.current-version }}
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
