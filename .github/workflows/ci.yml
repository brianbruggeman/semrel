name: CI
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  detect-new-version:
    runs-on: ubuntu-latest
    outputs:
      current-version: ${{ steps.get-current-version.outputs.current-version }}
      next-version: ${{ steps.set-new-version.outputs.next-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: main
          fetch-depth: 0
      - name: Install jq
        run: sudo apt-get install jq
      - name: Get latest semrel release
        id: get-latest-release
        run: |
          release_data=$(curl --silent -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          echo "Release data: $release_data"
          tag_name=$(echo "$release_data" | jq -r .tag_name)
          echo "::set-output name=tag_name::$tag_name"
          asset_id=$(echo "$release_data" | jq -r '.assets[] | select(.name == "semrel-'${tag_name}'-x86_64-unknown-linux-musl.tgz") | .id')
          echo "Asset ID: $asset_id"
          asset_url="https://api.github.com/repos/${{ github.repository }}/releases/assets/${asset_id}"
          echo "Asset URL: $asset_url"
          echo "::set-output name=asset_url::$asset_url"
          # release_data=$(curl --silent -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          # echo "Release data: $release_data"
          # if [[ $(echo "$release_data" | jq -r .message) == "Not Found" ]]; then
          #   echo "No releases found."
          #   exit 1
          # else
          #   tag_name=$(echo "$release_data" | jq -r .tag_name)
          #   echo "::set-output name=tag_name::${tag_name}"
          # fi
      - name: Download semrel
        id: download-semrel
        run: |
          asset_url=${{ steps.get-latest-release.outputs.asset_url }}
          echo "Downloading from $asset_url"
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" -o semrel-${{ steps.get-latest-release.outputs.tag_name }}-x86_64-unknown-linux-musl.tgz "$asset_url"
          if [ $? -ne 0 ]; then
            echo "Failed to download the file. Response from curl:"
            exit 1
          fi
          tar -tf semrel-${{ steps.get-latest-release.outputs.tag_name }}-x86_64-unknown-linux-musl.tgz
          tar -xzf semrel-${{ steps.get-latest-release.outputs.tag_name }}-x86_64-unknown-linux-musl.tgz -C .cargo/bin x86_64-unknown-linux-musl/semrel-${{ steps.get-latest-release.outputs.tag_name }}-x86_64-unknown-linux-musl --strip-components=1
          ls -lashtr
          mkdir -p .cargo/bin
          mv .cargo/bin/semrel-${{ steps.get-latest-release.outputs.tag_name }}-x86_64-unknown-linux-musl .cargo/bin/semrel
          chmod +x .cargo/bin/semrel
      - name: Get current version
        id: get-current-version
        run: echo "::set-output name=current-version::$(./semrel show current)"
      - name: Get new version
        id: set-new-version
        run: echo "::set-output name=next-version::$(./semrel show next)"

  cargo_fmt:
    needs: [detect-new-version]
    if: ${{ needs.detect-new-version.outputs.next-version != needs.detect-new-version.outputs.current-version }}
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Install cargo fmt
        run: rustup component add rustfmt
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          toolchain: nightly
          command: fmt
          args: -- --check

  cargo_clippy:
    needs: [detect-new-version]
    if: ${{ needs.detect-new-version.outputs.next-version != needs.detect-new-version.outputs.current-version }}
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Install clippy
        run: rustup +nightly component add clippy
      - name: Cache cargo clippy
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-clippy-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          toolchain: nightly
          command: clippy

  cargo_build:
    needs: [detect-new-version]
    if: ${{ needs.detect-new-version.outputs.next-version != needs.detect-new-version.outputs.current-version }}
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build

  cargo_test:
    needs: [detect-new-version]
    if: ${{ needs.detect-new-version.outputs.next-version != needs.detect-new-version.outputs.current-version }}
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
