name: CD

on:
  push:
    branches:
      - main
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  build:
    strategy:
      matrix:
        include:
          - target: aarch64-apple-darwin
            cross: true
          - target: x86_64-apple-darwin
            cross: false
          - target: aarch64-unknown-linux-gnu
            cross: true
          - target: x86_64-unknown-linux-gnu
            cross: false

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.target }}
          toolchain: stable
          override: true
      - name: Setup Cross
        uses: actions-rs/cargo@v1
        if: matrix.cross
        with:
          command: install
          args: cross
      - name: Build
        run: |
          if ${{ matrix.cross }}; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
      - name: Archive
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/*

  release:
    needs: build
    runs-on: ${{ runner.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download Artifacts
        uses: actions/download-artifact@v2
      - name: Install tar
        run: sudo apt-get install tar
      - name: Package Artifacts
        run: |
          for target in aarch64-apple-darwin x86_64-apple-darwin aarch64-unknown-linux-gnu x86_64-unknown-linux-gnu; do
            tar czvf $target.tgz $target
          done
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./*.tgz
          asset_name: release.tgz
          asset_content_type: application/gzip
