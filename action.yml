name: 'Semrel'
description: 'GitHub Action to detect new versions and generate release notes using semrel'
author: 'Brian Bruggeman'
inputs:
  branch:
    description: 'Branch to check out'
    required: false
    default: 'main'
  path:
    description: 'Path to project files'
    required: false
    default: '.'
outputs:
  current-version:
    description: 'The current version'
    value: ${{ steps.semrel.outputs.current-version }}
  log:
    description: 'Base64 encoded commit log for the next version'
    value: ${{ steps.semrel.outputs.log }}
  next-version:
    description: 'The next version'
    value: ${{ steps.semrel.outputs.next-version }}
  release-notes:
    description: 'Base64 encoded release notes for the next version'
    value: ${{ steps.semrel.outputs.release-notes }}
  version-changed:
    description: 'Identifies if current and next versions are different'
    value: ${{ steps.semrel.outputs.version-changed }}
  manifest-path:
    description: 'Identifies path to manifest file'
    value: ${{ steps.semrel.outputs.manifest-path }}
runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch }}
        fetch-depth: 0

    - name: Install jq
      shell:  bash
      run: sudo apt-get install -y jq

    - name: Get latest semrel release data
      id: get-release-data
      shell: bash
      run: |
        url="https://api.github.com/repos/brianbruggeman/semrel/releases/latest"
        release_data=$(curl --silent $url)
        if [ $? -ne 0 ] || [ -z "$release_data" ]; then
          echo "Failed to fetch release data from URL: $url"
          exit 1
        fi
        release_data=$(echo "$release_data" | base64 | tr -d '\n')
        echo "release_data=$release_data" >> $GITHUB_ENV

    - name: Extract tag name
      id: extract-tag-name
      shell: bash
      run: |
        release_data=$(echo "${{ env.release_data }}" | base64 --decode)
        tag_name=$(echo "$release_data" | jq -r .tag_name)
        if [ $? -ne 0 ] || [ -z "$tag_name" ]; then
          echo "Failed to extract tag name from release data: $release_data"
          exit 1
        fi
        echo "tag_name=$tag_name" >> $GITHUB_ENV

    - name: Extract assets
      id: extract-assets
      shell: bash
      run: |
        release_data=$(echo "${{ env.release_data }}" | base64 --decode)
        assets=$(echo "$release_data" | jq -c '.assets[]')
        if [ $? -ne 0 ] || [ -z "$assets" ]; then
          echo "Failed to extract assets from release data: $release_data"
          exit 1
        fi
        assets=$(echo "$assets" | base64 | tr -d '\n')
        echo "assets=$assets" >> $GITHUB_ENV

    - name: Determine asset tag and good assets
      id: determine-asset-tag
      shell: bash
      run: |
        assets=$(echo "${{ env.assets }}" | base64 --decode)
        tag_name=$(echo "${{ env.tag_name }}")
        asset_tag="semrel-$tag_name-x86_64-unknown-linux-musl.tgz"
        good_assets=$(echo "$assets" | jq -r --arg asset_tag "$asset_tag" 'select(.name == $asset_tag)')
        if [ $? -ne 0 ] || [ -z "$good_assets" ]; then
          echo "Failed to find good assets for tag "$asset_tag". Assets: $assets"
          exit 1
        fi
        good_assets=$(echo "$good_assets" | base64 | tr -d '\n')
        echo "asset_tag=$asset_tag" >> $GITHUB_ENV
        echo "good_assets=$good_assets" >> $GITHUB_ENV

    - name: Find asset ID and URL
      id: find-asset-id
      shell: bash
      run: |
        asset_tag=$(echo "${{ env.asset_tag }}")
        assets=$(echo "${{ env.assets }}" | base64 --decode)
        asset_id=$(echo "$assets" | jq -r --arg asset_tag "$asset_tag" 'select(.name == $asset_tag) | .id')
        if [ $? -ne 0 ] || [ -z "$asset_id" ]; then
          echo "Failed to find asset ID. Assets: $assets, Asset Tag: $asset_tag"
          exit 1
        fi
        asset_url="https://api.github.com/repos/brianbruggeman/semrel/releases/assets/$asset_id"
        echo "asset_id=$asset_id" >> $GITHUB_ENV
        echo "asset_url=$asset_url" >> $GITHUB_ENV

    - name: Set semrel filename
      id: set-semrel-filename
      shell: bash
      run: |
        semrel_filename="semrel-${{ env.tag_name }}-x86_64-unknown-linux-musl"
        echo "semrel_filename=$semrel_filename" >> $GITHUB_ENV

    - name: Download and extract semrel
      shell: bash
      run: |
        curl -L -H "Accept: application/octet-stream" -o ${{ env.semrel_filename }}.tgz ${{ env.asset_url }}
        tar -xzf ${{ env.semrel_filename }}.tgz -C . --strip-components=1
        chmod +x ${{ env.semrel_filename }}
        mv ${{ env.semrel_filename }} ./semrel

    - name: Show commit logs used
      shell: bash
      run: ./semrel show log

    - name: Set outputs
      id: semrel
      shell:  bash
      run: |
        current_version=$(./semrel --path=${{ inputs.path }} show current)
        log=$(./semrel --path=${{ inputs.path }} show log)
        next_version=$(./semrel --path=${{ inputs.path }} show next)
        release_notes=$(./semrel --path=${{ inputs.path }} show notes)
        manifest_path=$(./semrel --path=${{ inputs.path }} show manifest)

        # Encode multiline outputs to base64 to handle special characters and newlines
        encoded_release_notes=$(echo "$release_notes" | base64 | tr -d '\n')
        encoded_log=$(echo "$log" | base64 | tr -d '\n')

        echo "current-version=$current_version" >> $GITHUB_OUTPUT
        echo "next-version=$next_version" >> $GITHUB_OUTPUT
        echo "release-notes=$encoded_release_notes" >> $GITHUB_OUTPUT
        echo "log=$encoded_log" >> $GITHUB_OUTPUT
        echo "manifest-path=$manifest_path" >> $GITHUB_OUTPUT

        if [ "$next_version" != "$current_version" ]; then
          echo "version-changed=true" >> $GITHUB_OUTPUT
        else
          echo "version-changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Debug Outputs
      shell: bash
      run: |
        echo "version-changed: ${{ steps.semrel.outputs.version-changed }}"
        echo "current-version: ${{ steps.semrel.outputs.current-version }}"
        echo "next-version: ${{ steps.semrel.outputs.next-version }}"
        echo "release-notes: ${{ steps.semrel.outputs.release-notes }}"
        echo "log: ${{ steps.semrel.outputs.log }}"

        # Debug: Print the GITHUB_OUTPUT file to verify it's correct
        echo "DEBUG: Contents of GITHUB_OUTPUT:"
        cat $GITHUB_OUTPUT
